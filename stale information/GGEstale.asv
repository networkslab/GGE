function [errGGE,errGGEst] = GGEstale(n,Kmax,x0,G,proba)

% reslt_staleinfo.m

% Deniz Ustebay
% McGill University
% deniz.ustebay@mail.mcgill.ca
% November 28, 2008

% Simulates Greedy Gossip with Eavesdropping (GGE)with and without stale
% information. The input to the simulation is the number of nodes,
% number of gossip
% iterations, initial node values, graph topology matrix and node position
% matrix. The output is relative error which is defined as
% ||x(t)-x_ave||/||x(0)||, at every wireless transmission t.

% reslt_staleinfo.m investigates the case of stale information that is when
% nodes fail to overhear their neighbors. The failure of overhearing occurs
% with some probability and only effects the GGE's greedy neighbor to
% gossip selection.

% n: number of nodes
% Kmax: number of gossip iterations
% x0: initial node values (nx1)
% G: RGG matrix (nxn)
% pos: position matrix (nx2)
% proba: probability of missing a transmission (each node independently misses trans) 

% Identify neighborhoods
neighbors = cell(n,1);
nneighbors = zeros(n,1);

known = zeros(n,n);
knownst = zeros(n,n);
knowledge = zeros(n,n);

for i=1:n
    neighbors{i} = find(G(i,:));
    nneighbors(i) = numel(neighbors{i});
end

% Original average
xbar = mean(x0)*ones(n,1);

% Initialization
xmax = x0;
xmaxst = x0;

% Error in the average estimation
errGGE = zeros(Kmax,1);
errGGE(1) = norm(xmax - xbar)/norm(x0-xbar);
errGGEst = zeros(Kmax,1);
errGGEst(1) = norm(xmaxst - xbar)/norm(x0-xbar);

% Number of transmissions
trmax=1;
trmaxst=1;

% The sequence of random nodes that will wake up
source=ceil(n*rand(1,Kmax));

coun=0;
coun2=0;

% Algorithm for Regular gossip, Greedy gossip with eavesdropping,
% Geographic gossip
for k=2:Kmax
    s = source(k); %% the node that wakes up for this iteration

    % Greedy gossip with eavesdropping
    if (trmax<Kmax)
        yet = find((G(s,:)-known(s,:)));

        if (~isempty(yet))
            t = yet(ceil(rand*(length(yet))));

            avg = (xmax(s) + xmax(t))/2;
            xmax(s) = avg;
            xmax(t) = avg;
            trmax=trmax+2;
            errGGE(trmax-1) = errGGE(trmax-2);
            errGGE(trmax) = norm(xmax- xbar)/norm(x0-xbar);

            known(:,s) = ones(n,1).*G(:,s);
            known(:,t) = ones(n,1).*G(:,t);
        else
            [val,mi] = max((xmax(s)-xmax(neighbors{s})).^2);
            m = neighbors{s}(mi);
            avg = (xmax(s) + xmax(m))/2;
            xmax(s) = avg;
            xmax(m) = avg;
            trmax=trmax+3;
            errGGE(trmax-2) = errGGE(trmax-3);
            errGGE(trmax-1) = errGGE(trmax-3);
            errGGE(trmax) = norm(xmax - xbar)/norm(x0-xbar);

            known(:,s) = ones(n,1).*G(:,s);
            known(:,m) = ones(n,1).*G(:,m);
        end
    end

    % Greedy gossip with eavesdropping with stale information
    if (trmaxst<Kmax)

        yetst = find((G(s,:)-knownst(s,:)));

        if (~isempty(yetst))
            t = yetst(ceil(rand*(length(yetst))));

            avg = (xmaxst(s) + xmaxst(t))/2;
            xmaxst(s) = avg;
            xmaxst(t) = avg;
            trmaxst=trmaxst+2;
            errGGEst(trmaxst-1) = errGGEst(trmaxst-2);
            errGGEst(trmaxst) = norm(xmaxst- xbar)/norm(x0-xbar);

            knownst(:,s) = ones(n,1).*G(:,s);
            knownst(:,t) = ones(n,1).*G(:,t);

            knowledge(:,s) = avg.*G(:,s);
            knowledge(:,t) = avg.*G(:,t);

        else
            [val,mi] = max((xmaxst(s)-knowledge(s,neighbors{s})').^2);
            [val2,mi2] = max((xmaxst(s)-xmaxst(neighbors{s})).^2);


            %             knowledge(s,neighbors{s})
            %             xmaxst(neighbors{s})'
            %             55

            if (mi2~=mi)
                coun=coun+1;
            else
                coun2=coun2+1;
            end
            m = neighbors{s}(mi);
            avg = (xmaxst(s) + xmaxst(m))/2;
            xmaxst(s) = avg;
            xmaxst(m) = avg;
            trmaxst=trmaxst+3;
            errGGEst(trmaxst-2) = errGGEst(trmaxst-3);
            errGGEst(trmaxst-1) = errGGEst(trmaxst-3);
            errGGEst(trmaxst) = norm(xmaxst - xbar)/norm(x0-xbar);
                     
            knownst(:,s) = ones(n,1).*G(:,s);
            knownst(:,m) = ones(n,1).*G(:,m);

            knowledgeO=knowledge;
            knowledge(:,s) = avg.*G(:,s);
            knowledge(:,m) = avg.*G(:,m);

            for y=1:nneighbors(s)
                sl_node=neighbors{s}(y);
                sl=knowledgeO(sl_node,s);
                randomn=rand;
                if (randomn<proba)
                    knowledge(sl_node,s)=sl;
                end
            end
            for y=1:nneighbors(m)
                sl_node=neighbors{m}(y);
                sl=knowledgeO(sl_node,m);
                randomn=rand;
                if (randomn<proba)
                    knowledge(sl_node,m)=sl;
                end
            end



        end
    end

    clear sl; clear sl_node;

end